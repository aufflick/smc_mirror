// -*- mode: text; tab-width: 4; -*-
//
// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy of
// the License at http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
// 
// The Original Code is State Map Compiler (SMC).
// 
// The Initial Developer of the Original Code is Charles W. Rapp.
// Portions created by Charles W. Rapp are
// Copyright (C) 2000 Charles W. Rapp.
// All Rights Reserved.
// 
// Contributor(s): 
//
// State Map
//  This state map is recognizes the regular expression wcw(r) or
//  palindromes.
//
// RCS ID
// $Id$
//
// CHANGE LOG
// $Log$
// Revision 1.1  2001/01/03 03:14:00  cwrapp
// Initial revision
//
// Revision 1.1.1.1  2000/08/02 12:50:59  charlesr
// Initial source import, SMC v. 1.0, Beta 1.
//

%start Map3::Q1
%class AppClass
%header AppClass.h

%map Map1
%%
// State		Transition		End State		Action(s)
Q1 {
				Zero			push(Map1::Q1)		{}
				One				push(Map2::Q1)		{}
				C				Q2					{}
				OK				Q2					{}
				Error			Map3::Unacceptable  {emptyStateStack();}
}

Q2 {
				Zero			pop(OK)				{}
				Default			pop(Error)			{}
}

Default {
				EOS				Map3::Unacceptable  {
                                                    emptyStateStack();
                                                    Unacceptable();
                                                    }
				Unknown			Map3::Unacceptable  {emptyStateStack();}
}
%%

%map Map2
%%
// State		Transition		End State		Action(s)
Q1 {
				Zero			push(Map1::Q1)		{}
				One				push(Map2::Q1)		{}
				C				Q2					{}
				OK				Q2					{}
				Error			Map3::Unacceptable  {emptyStateStack();}
}

Q2 {
				One				pop(OK)				{}
				Default			pop(Error)			{}
}

Default {
				EOS				Map3::Unacceptable  {
                                                    emptyStateStack();
                                                    Unacceptable();
                                                    }
				Unknown			Map3::Unacceptable	{emptyStateStack();}
}
%%

%map Map3
%%
// State		Transition		End State		Action(s)
Q1 {
				Zero			push(Map1::Q1)		{}
				One				push(Map2::Q1)		{}
				C				Q2					{}
				OK				Q2					{}
				Error			Unacceptable		{}
}

Q2 {
				EOS				Acceptable			{Acceptable();}
				Default			Unacceptable		{}
}

Acceptable {}

Unacceptable {
			 	Default			nil					{}
}

Default {
				EOS				Unacceptable		{Unacceptable();}
				Unknown			Unacceptable		{}
}

%%
