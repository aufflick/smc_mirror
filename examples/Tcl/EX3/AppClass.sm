// -*- mode: text; tab-width: 4; -*-
//
// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy of
// the License at http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
// 
// The Original Code is State Machine Compiler (SMC).
// 
// The Initial Developer of the Original Code is Charles W. Rapp.
// Portions created by Charles W. Rapp are
// Copyright (C) 2000 Charles W. Rapp.
// All Rights Reserved.
// 
// Contributor(s): 
//
// AppClass --
//
//  This state machine is recognizes the regular expression wcw(r) or
//  palindromes.
//
// RCS ID
// $Id$
//
// CHANGE LOG
// $Log$
// Revision 1.2  2002/02/19 19:52:47  cwrapp
// Changes in release 1.3.0:
// Add the following features:
// + 479555: Added subroutine/method calls as argument types.
// + 508878: Added %import keyword.
//
// Revision 1.1.1.1  2001/01/03 03:14:00  cwrapp
//
// ----------------------------------------------------------------------
// SMC - The State Map Compiler
// Version: 1.0, Beta 3
//
// SMC compiles state map descriptions into a target object oriented
// language. Currently supported languages are: C++, Java and [incr Tcl].
// SMC finite state machines have such features as:
// + Entry/Exit actions for states.
// + Transition guards
// + Transition arguments
// + Push and Pop transitions.
// + Default transitions. 
// ----------------------------------------------------------------------
//
// Revision 1.1.1.1  2000/08/02 12:51:04  charlesr
// Initial source import, SMC v. 1.0, Beta 1.
//

%start Map3::Q1
%class AppClass

%map Map1
%%
// State		Transition		End State		Action(s)
Q1 {
				Zero			push(Map1::Q1)		{}
				One				push(Map2::Q1)		{}
				C				Q2					{}
				OK				Q2					{}
				Error			Map3::Unacceptable	{emptyStateStack();}
}

Q2 {
				Zero			pop(OK)				{}
				Default			pop(Error)			{}
}

Default {
				EOS				Map3::Unacceptable	{
													emptyStateStack();
													Unacceptable();
													}
				Unknown			Map3::Unacceptable	{emptyStateStack();}
}
%%

%map Map2
%%
// State		Transition		End State		Action(s)
Q1 {
				Zero			push(Map1::Q1)		{}
				One				push(Map2::Q1)		{}
				C				Q2					{}
				OK				Q2					{}
				Error			Map3::Unacceptable	{emptyStateStack();}
}

Q2 {
				One				pop(OK)				{}
				Default			pop(Error)			{}
}

Default {
				EOS				Map3::Unacceptable	{
													emptyStateStack();
													Unacceptable();
													}
				Unknown			Map3::Unacceptable	{emptyStateStack();}
}
%%

%map Map3
%%
// State		Transition		End State		Action(s)
Q1 {
				Zero			push(Map1::Q1)		{}
				One				push(Map2::Q1)		{}
				C				Q2					{}
				OK				Q2					{}
				Error			Unacceptable		{}
}

Q2 {
				EOS				Acceptable			{Acceptable();}
				Default			Unacceptable		{}
}

Acceptable {}

Unacceptable {
			 	Default			nil					{}
}

Default {
				EOS				Unacceptable		{Unacceptable();}
				Unknown			Unacceptable		{}
}

%%
