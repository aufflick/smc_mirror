// -*- tab-width: 4; -*-
//
// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy of
// the License at http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
// 
// The Original Code is State Machine Compiler (SMC).
// 
// The Initial Developer of the Original Code is Charles W. Rapp.
// Portions created by Charles W. Rapp are
// Copyright (C) 2000 - 2003 Charles W. Rapp.
// All Rights Reserved.
// 
// Contributor(s): 
//
// Task --
//
//  A task's sole responsiblity is to execute. This state machine
//  is used to track whether the task is running, suspended,
//  blocked or stopped.
//
// RCS ID
// $Id$
//
// CHANGE LOG
// $Log$
// Revision 1.4  2005/05/28 18:02:56  cwrapp
// Updated Tcl examples, removed EX6.
//
// Revision 1.0  2003/12/14 20:30:55  charlesr
// Initial revision
//

%start ExecuteMap::Suspended
%class Task

%map ExecuteMap
%%
// A task begins life in suspended animation.
Suspended
{
    Start
        Running
        {
            sendMessage(3 "Task is running.");
            stateUpdate("Running");
        }
}

// This task is now running.
Running
Entry {
    setStartTime();
    setRunTimer();
}
Exit
{
    setStopTime();
    stopTimer("Done");
}
{
    Suspend
        Suspended
        {
            sendMessage(3 "Task is being suspended.");
            stateUpdate("Suspended");
            setSuspendTime();
        }

    Done
        Stopped
        {
            sendMessage(3 "Task completed.");
            stateUpdate("Done");
            updateTaskMan("taskDone");
        }
}

Blocked
{
    Unblock
        Suspended
        {
            sendMessage(3 "Task unblocked.");
            stateUpdate("Suspended");
        }

    Block
        nil
        {}
}

Stopping
{
    Stopped
        Stopped
        {
            sendMessage(3 "Task stopped.");
            stateUpdate("Stopped");
            updateTaskMan("taskStopped");
        }

    Delete
        nil
        {}
}

Stopped
{
    // Now that the task is stopped, ignore
    // requests to block or stop.
    Block
        nil
        {}

    Stop
        nil
        {}

    Delete
        nil
        {}
}

Deleted
{
    Block
        nil
        {}

    Stop
        nil
        {}

    Delete
        nil
        {}
}

Default
{
    // Do blocks, stops and deletes immediately.
    Block
        Blocked
        {
            sendMessage(3 "Task blocked.");
            stateUpdate("Blocked");
        }

    Stop
        Stopping
        {
            sendMessage(3 "Task is being stopped.");
            setTimer("Stopped" idle);
        }

    Delete
        Deleted
        {
            sendMessage(3 "Task deleted.");
            stateUpdate("Deleted");
            updateTaskMan("taskDeleted");
        }

    // Ignore all other transitions unless in the
    // proper state.
    Start
        nil
        {}

    Started
        nil
        {}

    Suspend
        nil
        {}

    Suspended
        nil
        {}

    Unblock
        nil
        {}

    Done
        nil
        {}
}

%%
