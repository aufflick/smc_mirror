// -*- tab-width: 4; -*-
//
// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy of
// the License at http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
// 
// The Original Code is State Machine Compiler (SMC).
// 
// The Initial Developer of the Original Code is Charles W. Rapp.
// Portions created by Charles W. Rapp are
// Copyright (C) 2000 Charles W. Rapp.
// All Rights Reserved.
// 
// Contributor(s): 
//
// TaskManager --
//
//  The task manager is responsible for executing tasks. This
//  state machine tracks whether the manager has any tasks to run
//  and how long a task is executed.
//
// RCS ID
// $Id$
//
// CHANGE LOG
// $Log$
// Revision 1.3  2002/02/19 19:52:48  cwrapp
// Changes in release 1.3.0:
// Add the following features:
// + 479555: Added subroutine/method calls as argument types.
// + 508878: Added %import keyword.
//
// Revision 1.2  2001/05/09 23:40:02  cwrapp
// Changes in release 1.0, beta 6:
// Fixes the four following bugs:
// + 416011: SMC does not properly handle pop transitions which
//           have no argument.
// + 416013: SMC generated code does not throw a
//           "Transition Undefined" exception as per Programmer's
//           Manual.
// + 416014: The initial state's Entry actions are not being
//           executed.
// + 416015: When a transition has both a guarded and an unguarded
//           definition, the Exit actions are only called when the
//           guard evaluates to true.
// + 422795: SMC -tcl abnormally terminates.
//
// Revision 1.1.1.1  2001/01/03 03:14:00  cwrapp
//
// ----------------------------------------------------------------------
// SMC - The State Map Compiler
// Version: 1.0, Beta 3
//
// SMC compiles state map descriptions into a target object oriented
// language. Currently supported languages are: C++, Java and [incr Tcl].
// SMC finite state machines have such features as:
// + Entry/Exit actions for states.
// + Transition guards
// + Transition arguments
// + Push and Pop transitions.
// + Default transitions. 
// ----------------------------------------------------------------------
//
// Revision 1.1.1.1  2000/08/02 12:51:06  charlesr
// Initial source import, SMC v. 1.0, Beta 1.
//

// Since this task manager does not have any tasks to
// run, it is in the idle state.
%start MainMap::Idle
%class TaskManager

%map MainMap
%%

// Wait here for some work to do.
Idle
Entry {sendMessage(4, "Idle. Looking for a task to run.");
       checkTaskQueue();}
{
    // Start the highest priority task running and start the slice
    // timer.
    RunTask        RunningTask         {startTask();}

    // There is now a task a run.
    TaskCreated    RunningTask         {startTask();}
    TaskUnblocked  RunningTask         {startTask();}

    Shutdown       IdleShutdown         {sendMessage(0, "Shutdown started.");
                                         setTimer("ShutdownTimeout", 2000);
                                        }

    // It is possible for the task to complete before it
    // receives the suspend request. When this happens, handle
    // this in the same manner as above.
    TaskDone [areTasksQueued();]
                   RunningTask         {startTask();}

    TaskDone       Idle                {stopTimer("ReplyTimeout");}

}

// A task has been started and is running.
RunningTask
Entry {setTimer("SliceTimeout", 3000);}
Exit {stopTimer("SliceTimeout");}
{
    // The time slice is up. Suspend the task.
    SliceTimeout   SuspendingTask      {suspendTask();}

    // The task has been blocked. Find another task to run.
    TaskBlocked    Idle                {}

    // The task has been deleted. Find another task to run.
    TaskDeleted    Idle                {}

    // The task has completed its work. Find another task to run.
    TaskDone       Idle                {}
}

// Wait here for the task to suspend.
SuspendingTask
Entry {setTimer("ReplyTimeout", 500);}
Exit  {stopTimer("ReplyTimeout");}
{
    TaskSuspended  Idle                {}

    // Wait only so long for the task to reply.
    ReplyTimeout   Idle                {}

    // Just in case a task completes exactly at the same time
    // as the run slice ends.
    TaskDone       Idle                {}
}

// Wait here while the tasks report in.
ShuttingDown
{
    // A task is reporting it has stopped. When all tasks are
    // stopped, exit this application.
    TaskStopped[allTasksStopped();]
                   ShutdownComplete     {stopTimer("ShutdownTimeout");
                                         sendMessage(0, "Shutdown completed.");
                                         exitApplication(0);
                                        }

    // Another task has stopped but there are more.
    TaskStopped    nil                  {}

    // Timed out waiting for the tasks to die. Clean up and
    // exit anyway.
    ShutdownTimeout ShutdownComplete    {sendMessage(0, "Timed out waiting for tasks to stop. Forcibly deleting tasks and exiting.");
                                         deleteAllTasks();
                                         exitApplication(1);
                                        }

    // Since we are shutting down, ignore task suspended
    // messages.
    TaskSuspended  nil                  {}

    // If another shutdown is seen, ignore it.
    Shutdown       nil                  {}
}

// The system was idle when the shutdown request occurred.
// Wait for the shutdown timeout, then exit.
IdleShutdown
{
    ShutdownTimeout ShutdownComplete    {sendMessage(0, "Shutdown completed.");
                                         exitApplication(0);
                                        }
}

ShutdownComplete
{
    // Once this state is reached, don't do anything.
    Shutdown       nil                  {}
    Default        nil                  {}
}

Default
{
    // Tell all tasks to stop. Wait for them to reply but only
    // so long. If they fail to reply, kill 'em anyway.
    Shutdown       ShuttingDown        {sendMessage(0, "Shutdown started. Stopping all tasks.");
                                        stopAllTimers();
                                        stopAllTasks();
                                        setTimer("ShutdownTimeout", 5000);
                                       }

    // Ignore these events if already running a task.
    TaskCreated    nil                  {}
    TaskUnblocked  nil                  {}

    // Ignore timeouts when unexpected.
    SliceTimeout   nil                  {}
    ReplyTimeout   nil                  {}
}

%%
