// -*- tab-width: 4; -*-
//
// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy of
// the License at http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
// 
// The Original Code is State Map Compiler (SMC).
// 
// The Initial Developer of the Original Code is Charles W. Rapp.
// Portions created by Charles W. Rapp are
// Copyright (C) 2000 Charles W. Rapp.
// All Rights Reserved.
// 
// Contributor(s): 
//
// TaskManager --
//
//  The task manager is responsible for executing tasks. This
//  statemap tracks whether the manager has any tasks to run
//  and how long a task is executed.
//
// RCS ID
// $Id$
//
// CHANGE LOG
// $Log$
// Revision 1.1  2001/01/03 03:14:00  cwrapp
// Initial revision
//
// Revision 1.1.1.1  2000/08/02 12:51:06  charlesr
// Initial source import, SMC v. 1.0, Beta 1.
//

// Since this task manager does not have any tasks to
// run, it is in the idle state.
%start MainMap::Idle
%class TaskManager

%map MainMap
%%

// Wait here for some work to do.
Idle
Entry {sendMessage(4, "Idle. Looking for a task to run.");
       checkTaskQueue();}
{
    // Start the highest priority task running and start the slice
    // timer.
    RunTask        RunningTask         {startTask();}

    Shutdown       IdleShutdown         {sendMessage(0, "Shutdown started.");
                                         setTimer("ShutdownTimeout", 2000);
                                        }

    // It is possible for the task to complete before it
    // receives the suspend request. When this happens, handle
    // this in the same manner as above.
    TaskDone       Idle                {stopTimer("ReplyTimeout");}

}

// A task has been started and is running.
RunningTask
Entry {setTimer("SliceTimeout", 3000);}
Exit {stopTimer("SliceTimeout");}
{
    // The time slice is up. Suspend the task.
    SliceTimeout   Idle                {suspendTask();}

    // The task has been blocked. Find another task to run.
    TaskBlocked    Idle                {}

    // The task has been deleted. Find another task to run.
    TaskDeleted    Idle                {}

    // The task has completed its work. Find another task to run.
    TaskDone       Idle                {}
}

// Wait here while the tasks report in.
ShuttingDown
{
    // A task is reporting it has stopped. When all tasks are
    // stopped, exit this application.
    TaskStopped[allTasksStopped();]
                   ShutdownComplete     {stopTimer("ShutdownTimeout");
                                         sendMessage(0, "Shutdown completed.");
                                         exitApplication(0);
                                        }

    // Another task has stopped but there are more.
    TaskStopped    nil                  {}

    // Timed out waiting for the tasks to die. Clean up and
    // exit anyway.
    ShutdownTimeout ShutdownComplete    {sendMessage(0, "Timed out waiting for tasks to stop. Forcibly deleting tasks and exiting.");
                                         deleteAllTasks();
                                         exitApplication(1);
                                        }

    // If another shutdown is seen, ignore it.
    Shutdown       nil                  {}
}

// The system was idle when the shutdown request occurred.
// Wait for the shutdown timeout, then exit.
IdleShutdown
{
    ShutdownTimeout ShutdownComplete    {sendMessage(0, "Shutdown completed.");
                                         exitApplication(0);
                                        }
}

ShutdownComplete
{
    // Once this state is reached, don't do anything.
    Shutdown       nil                  {}
    Default        nil                  {}
}

Default
{
    // Tell all tasks to stop. Wait for them to reply but only
    // so long. If they fail to reply, kill 'em anyway.
    Shutdown       ShuttingDown        {sendMessage(0, "Shutdown started. Stopping all tasks.");
                                        stopAllTimers();
                                        stopAllTasks();
                                        setTimer("ShutdownTimeout", 5000);
                                       }

    // This transition does nothing. It is here to force the
    // entry action to done. The entry action will issue a
    // RunTask transition and so cause the new task to be run.
    TaskCreated    nil                  {}
    TaskUnblocked  nil                  {}
}

%%
