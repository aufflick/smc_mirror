// -*- mode: text; tab-width: 4; -*-
//
// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy of
// the License at http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
// 
// The Original Code is State Map Compiler (SMC).
// 
// The Initial Developer of the Original Code is Charles W. Rapp.
// Portions created by Charles W. Rapp are
// Copyright (C) 2000 Charles W. Rapp.
// All Rights Reserved.
// 
// Contributor(s): 
//
// State Map
//	This state map is recognizes the regular expression 0*1*.
//
// RCS ID
// $Id$
//
// CHANGE LOG
// $Log$
// Revision 1.2  2001/04/09 13:28:31  cwrapp
// Updated to test rel. 1.0, beta 5.
//
// Revision 1.1.1.2  2001/03/26 14:41:47  cwrapp
// Corrected Entry/Exit action semantics. Exit actions are now
// executed only by simple transitions and pop transitions.
// Entry actions are executed by simple transitions and push
// transitions. Loopback transitions do not execute either Exit
// actions or entry actions. See SMC Programmer's manual for
// more information.
//
// Revision 1.1.1.1  2001/01/03 03:14:00  cwrapp
//
// ----------------------------------------------------------------------
// SMC - The State Map Compiler
// Version: 1.0, Beta 3
//
// SMC compiles state map descriptions into a target object oriented
// language. Currently supported languages are: C++, Java and [incr Tcl].
// SMC finite state machines have such features as:
// + Entry/Exit actions for states.
// + Transition guards
// + Transition arguments
// + Push and Pop transitions.
// + Default transitions. 
// ----------------------------------------------------------------------
//
// Revision 1.1.1.1  2000/08/02 12:51:01  charlesr
// Initial source import, SMC v. 1.0, Beta 1.
//

%start Map1::Start
%class AppClass
%header AppClass.h

%map Map1
%%
// State		Transition		End State		Action(s)
Start {
				Zero			Zeros			{}
				One				Ones			{}
				Unknown			Error			{}
				EOS				OK				{Acceptable();}
}

Zeros {
				Zero			Zeros			{}
				One				Ones			{}
				Unknown			Error			{}
				EOS				OK				{Acceptable();}
}

Ones {
				Zero			Error			{}
				One				Ones			{}
				Unknown			Error			{}
				EOS				OK				{Acceptable();}
}

OK {}

Error {
				Zero			nil				{}
				One				nil				{}
				Unknown			nil				{}
				EOS				nil				{Unacceptable();}
}

%%
